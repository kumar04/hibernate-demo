Q.@temporal in hibernate
The temporal precision is not specified in core Java APIs. @Temporal is a JPA annotation that converts back and forth between timestamp and java.util.Date. It also converts time-stamp into time. For example, in the snippet below, @Temporal(TemporalType.DATE)drops the time value and only preserves the date.   
Q.what is the meaning of catalog = "test" in hibernate
Ans: catalog is used for database name
Q.in hibernate use of cascade and inverse? 
Inverse keyword is applied in one to many relationship. Here’s the question, if save or update operation perform in “Stock” object, should it update the “stockDailyRecords” relationship
Cascade attribute is mandatory, when ever we apply relationship between objects, cascade attribute transfers operations done on one object onto its related child objects
Q.first level cache? second level cache in hibernate? 
Flushing the session forces Hibernate to synchronize the in-memory state of the Session with the database (i.e. to write changes to the database). By default, Hibernate will flush changes automatically for you:
evict() evicts a single object from the session. clear() evicts all the objects in the session. Calling clear() is like calling evict() on every object associated with the session.
before some query executions
when a transaction is committed
Allowing to explicitly flush the Session gives finer control that may be required in some circumstances (to get an ID assigned, to control the size of the Session,...
Q.what is diff b/w spring-jdbc and hibernate? 
cache is not supported by spring jdbc,query is not independence for spring jdbc
Q.what are all the drawbacks of jdbc over hibernate?
Q.they given one query in sql and they are asking corresponding criteria api query?
Q.why we are using @transient in hibernate?
Ans:@Transient
private int country;
The value of country won’t be saved into database. 
If you just want to display some value to the end user and it's not going to be persisted in your database then the object property 
should be annotated with @Transient.
Q.what are all the inputs we are giving to SessionFactory? 
Transaction beginTransaction(),Transaction beginTransaction(),void clear(),Connection close(),	
Criteria createCriteria(String entityName),Query createQuery(String queryString),SQLQuery createSQLQuery(String queryString)
Q.what we are writing in hibernate-mapping file? 
class name,table name,identity value,column information
Q.what we are writing in hibernate-configuration file?
database info,hibernate properties,resource file
Q.What is the difference between load() and get() method?
load() : 

- Use load() method only when you are sure that object you want to read already exists. 
- If unique Id of an object does not exists in database then load() method will throw an exception.
- load() method return proxy object default and database won't be hit until the proxy is first invoked.

get() :

- Use get() method when you are not sure obout the object existance in the database.
- If object does not exists in the database, the get() method will return null.
- get() method will hit database immediately.
Q.What is the difference between merge and update method?

Use update() method when you are sure that session does not contain an already persistent instance with the same identifier, and merge()
if you want to merge your modifications at any time without consideration of the state of the session.
Q.Why are callback interfaces useful in Hibernate?

Callback interfaces are useful as it allows the application to receive important notification about the objects that are in execution 
phase. It includes the objects that are loaded, saved or deleted from the Hibernate. Callback interfaces are very important to implement
the general functionality like audit records, etc. It sends a notification when any object even occurs. It allows the programmer to get 
the error information or exception handling can be done in a better way to notify the user on run time in case of any problem in the 
programming code.


Q.What is the use of @Transaction.
I think transactions belong on the Service layer. It's the one that knows about units of work and use cases. It's the right answer if 
you have several DAOs injected into a Service that need to work together in a single transaction.
ACID properties of transactions
ACID Properties. A transaction is a very small unit of work.
Q. What is Dialect?
 some point hibernate has to use database specific SQL. Hibernate uses "dialect" configuration to know which database you are using so 
 that it can switch to the database specific SQL generator code 
2. Where you write configuration detail?
hibernate-cfg.xml
3. What is HQL? Have you ever used HQL in your project?
Hibernate query language.yes
4. How to use L2 cache? 
add ecache inject property
add ecache.xml file which is add maxtime,mintime,connection pool
5. Difference between l1 and l2 cache and where they are associate?
session,sessionfactory
6. Difference between merge and update?
if entity is not present in session ,it throws exception for update method
